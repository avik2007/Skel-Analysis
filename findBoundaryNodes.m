%% ---------------------- findBoundaryNodes ------------------------------
% Avik Mondal
% 
% Aim:
% - this function takes the nodes generated by convertSkelToGraph
%   (Skel2Graph)and the ones around the boundary (which we want to fix with
%   periodic boundary conditions with abaqus)
% - created 8/15 so has similar parameters as findingStartingNodes' and
% findingEndingNodes' 8/14 parameters
% - NOTE: THIS PICKS OUT BOUNDARY POINTS BASED ON HOW CLOSE THE NODES ARE
% TO THE ENDPOINTS OF THE VOLUME OF INTEREST. POTENTIALLY LATER DO IT BASED
% ON THE MAXIMALLY DISTANT NODE.
%
% 
%
% Parameters:
% struct node - contains the nodes generated from converting skeletonBin to
%    a graph
% matrix skel - contains the binarized skeletal VOI (binary, skeletonized 3d
%    matrix). Used mainly for dimensions
% int subgraphNum - contains the index of the subgraph that the function
%     will be looking through
% int boundaryNum - 1 picks out the x boundary (the plane where x = 0 ), 2
%     picks out x = xEnd, 3 picks out y=0, 4 picks out y=yEnd, 5 picks out
%     z=0, and 6 picks out z=zEnd
% this link helped with finding all the end points
%-https://stackoverflow.com/questions/14480876/using-find-with-a-struct
%--------------------------------------------------------------------------
function boundaryNodes = findBoundaryNodes(node,skel, subgraphNum, boundaryNum)
%captures dimensions of the skeleton array
w = size(skel,1);
l = size(skel,2);
h = size(skel,3);

depththreshold = 5;
%this is the depth for which the program will look for starting nodes. i.e
%for a depth threshold of 5, the code will look through the first 5 layers
%to find starting nodes
boundaryIndices =  int16.empty;

switch boundaryNum
    case 1
        %xStart boundary points
        xStartep = find( ( ([node.ep] == 1) & ([node.subGraph] == subgraphNum) ) & ([node.comx] < depththreshold)  );
        for index = 1:length(xStartep)
            conns = node(xStartep(index)).conn;
            if (node(conns).comx > node(xStartep(index)).comx )
                boundaryIndices  = vertcat(boundaryIndices, xStartep(index)); 
            end    
        end        
    case 2
        %xEnd boundary points
        xEndep = find( ( ([node.ep] == 1) & ([node.subGraph] == subgraphNum) ) & ([node.comx] > l-depththreshold)  );
        for index2 = 1:length(xEndep)
            conns = node(xEndep(index2)).conn;
            if (node(conns).comx < node(xEndep(index2)).comx )
                boundaryIndices = vertcat(boundaryIndices,xEndep(index2));
            end 
        end
    case 3
        %yStart boundary points
        yStartep = find( ( ([node.ep] == 1) & ([node.subGraph] == subgraphNum) ) & ([node.comy] < depththreshold)    );
        for index3 = 1:length(yStartep)
            conns = node(yStartep(index3)).conn;
            if (node(conns).comy > node(yStartep(index3)).comy )
                boundaryIndices = vertcat(boundaryIndices,yStartep(index3));
            end
        end
    case 4
        yEndep = find( ( ([node.ep] == 1) & ([node.subGraph] == subgraphNum) ) & ([node.comy] > w-depththreshold) );     
        %yEnd boundary poitns
        for index4 = 1:length(yEndep)
            conns = node(yEndep(index4)).conn;
            if (node(conns).comy < node(yEndep(index4)).comy )
                boundaryIndices = vertcat(boundaryIndices,yEndep(index4));
            end
        end
    case 5
        %same as findStartingPoints
        endPts = find(([node.ep] == 1) & ([node.comz] < depththreshold) & [node.subGraph] == subgraphNum );
        for index = 1:length(endPts)
            conns = node(endPts(index)).conn;
            if (node(conns).comz > node(endPts(index)).comz )
                boundaryIndices  = vertcat(boundaryIndices, endPts(index)); 
            end    
        end
    case 6
        %SAME AS findEndPoints
        endPts = find(([node.ep] == 1) & ([node.comz] > h-depththreshold) & [node.subGraph] == subgraphNum  );
        for index = 1:length(endPts)
            conns = node(endPts(index)).conn;
            if (node(conns).comz < node(endPts(index)).comz )
                boundaryIndices  = vertcat(boundaryIndices, endPts(index));      
            end    
        end
end
boundaryNodes = boundaryIndices;

