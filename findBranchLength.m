%% ---------------------- findBranchLength ------------------------------
% Avik Mondal
% 
% Aim:
% - this function takes the links generated by convertSkelToGraph
%   (Skel2Graph)and computes their length
%
% - this function is included in convertSkelToGraph so it's use is probably
%   unecessary
% - note as of 7/6/17, this class is probably unnecessary
% Parameters:
% struct link - contains the links generated from converting skele
% array skel - contains the binarized skeletal VOI (binary, skeletonized 3d
% array)
%--------------------------------------------------------------------------
function linkWithLength = findBranchLength(node,link,skel)

linkWithLength = link;
if isfield(link, 'point')
    w = size(skel,1);
    l = size(skel,2);
    h = size(skel,3);
    for i = 1:length(link)
        linkWithLength(i).length = 0;
        segmentLength = 0;
        for j = 1:( length(link(i).point) - 1 )
       
            [x2,y2,z2] = ind2sub([w,l,h],link(i).point(j));
            [x3,y3,z3] = ind2sub([w,l,h],link(i).point(j+1));
            %line([y3 y2],[x3 x2],[z3 z2],'Color',col,'LineWidth',2);
            segmentLength = sqrt((x3-x2).^2+(y3-y2).^2+(z3-z2)^2);
            linkWithLength(i).length = linkWithLength(i).length+segmentLength;
      
        end
    end
else
    for i = 1:length(link)
        node1 = link(i).n1;
        node2 = link(i).n2;
        point1 = [node(node1).comx,node(node1).comy,node(node1).comz];
        point2 = [node(node2).comx,node(node2).comy,node(node2).comz];
        diffvec = point2-point1; 
        linkWithLength(i).length = sqrt( diffvec(1,1)^2+diffvec(1,2)^2+diffvec(1,3)^2 );
    end
end